import Loader from "@/components/atoms/Loader";
import { getProductDetail, ProductDef } from "@/products/product";
import { Box } from "@mui/material";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
import dynamic from "next/dynamic";
import Error from "next/error";
import Head from "next/head";
import React, { Suspense } from "react";
const DefaultLayout = dynamic(
  () => import("@/components/layout/DefaultLayout"),
  { suspense: true, ssr: false }
);

interface Iprops {
  product: ProductDef | null;
}

const ProductDetail: NextPage<Iprops> = ({ product }) => {
  if (!product) {
    return <Error statusCode={404} />;
  }
  return (
    <Box>
      <Head>
        <title>E-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Suspense fallback={<Loader />}>
        {/* <p style={{ textAlign: "center", fontSize: "50px", marginTop: "50px" }}>
          {t.title}
        </p> */}
        <DefaultLayout>
          <p>{product?.name}</p>
        </DefaultLayout>
      </Suspense>
    </Box>
  );
};

export default ProductDetail;

export const getStaticProps: GetStaticProps = async ({ params }) => {
  try {
    const data = await getProductDetail((params?.id as string) || "");
    if (!data) {
      return {
        redirect: {
          destination: "/",
          permanent: false,
          // statusCode: 301
        },
      };
    }
    return {
      props: {
        product: data.data.data,
      },
      revalidate: 86400,
    };
  } catch {
    return {
      props: {
        product: null,
      },
    };
  }
};

export const getStaticPaths: GetStaticPaths<{ slug: string }> = async () => {
  return {
    paths: [], //indicates that no page needs be created at build time
    fallback: "blocking", //indicates the type of fallback
  };
};
