import React, { Suspense } from "react";
import { GetServerSideProps, NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import { Box } from "@mui/material";

import { useStyles } from "@/themes/style";
import Loader from "@/components/atoms/Loader";
import PaginationCustom from "@/components/atoms/PaginationCustom";
import SearchSelectBox from "@/components/layout/SearchSelectBox/SearchSelectBox";
import Products from "@/features/products/components/Products";
import {
  getProductApiByPageAndTypeAndPrice,
  ProductDef,
} from "@/features/products/product";

const DefaultLayout = dynamic(
  () => import("@/components/layout/DefaultLayout"),
  { suspense: true, ssr: false }
);

interface Iprops {
  products: ProductDef[];
  totalPage?: number;
  page?: number;
}
const Search: NextPage<Iprops> = ({ products, totalPage = 1, page = 1 }) => {
  const classess = useStyles();

  return (
    <div>
      <Head>
        <title>E-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Suspense fallback={<Loader />}>
        {/* <p style={{ textAlign: "center", fontSize: "50px", marginTop: "50px" }}>
    {t.title}
  </p> */}
        <DefaultLayout>
          <SearchSelectBox />
          <Box className={classess.container}>
            <Products products={products} />
          </Box>
          <PaginationCustom page={page} totalPage={totalPage} />
        </DefaultLayout>
      </Suspense>
    </div>
  );
};

export default Search;
export const getServerSideProps: GetServerSideProps<Iprops> = async context => {
  try {
    const param = context.query;
    const data = await getProductApiByPageAndTypeAndPrice(param);
    if (data && data.data.data.length > 0) {
      const { data: products, totalPage, page } = data.data;
      return {
        props: {
          products,
          totalPage,
          page,
        },
      };
    }
    return {
      props: {
        products: [],
      },
    };
  } catch {
    return {
      props: {
        products: [],
      },
    };
  }
};
