import { AuthPathsEnum } from "@/features/auth/auth";
import {
  FIELDS_INPUT_SIGNUP,
  InitialSignupValues,
  phoneRegExp,
} from "@/features/auth/constants/constants";
import CustomTextField from "@/components/atoms/CustomTextField";
import Loader from "@/components/atoms/Loader";
import theme from "@/themes/theme";
import { LoadingButton } from "@mui/lab";
import { Box, Checkbox, FormControlLabel, Typography } from "@mui/material";
import { useFormik } from "formik";
import { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { Suspense, useEffect, useState } from "react";
import * as yup from "yup";
import useAuthStore from "@/features/auth/store/auth";
const DefaultLayout = dynamic(
  () => import("@/components/layout/DefaultLayout"),
  { suspense: true, ssr: false }
);

const schema = yup.object({
  first_name: yup
    .string()
    .trim()
    .required("Firstname is required")
    .min(2, "Firstname must be at least 5 characters"),
  last_name: yup
    .string()
    .trim()
    .required("Lastname is required")
    .min(2, "Lastname must be at least 5 characters"),
  email: yup
    .string()
    .trim()
    .required("Email is required")
    .email("Invalid email"),
  phonenumber: yup
    .string()
    .required("Phone number is required")
    .matches(phoneRegExp, "Phone number is not valid"),
  password: yup
    .string()
    .trim()
    .required("Password is required")
    .min(5, "Password must be at least 5 characters"),
  confirmPassword: yup
    .string()
    .trim()
    .required("Password is required")
    .oneOf([yup.ref("password"), null], "Passwords must match"),
});

const Signup: NextPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [mounted, setMounted] = useState(false);
  const { signup } = useAuthStore();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      first_name: "",
      last_name: "",
      email: "",
      password: "",
      phonenumber: "",
      confirmPassword: "",
    } as InitialSignupValues,
    validationSchema: schema,
    onSubmit: async values => {
      const { first_name, last_name, email, password, phonenumber } = values;
      setLoading(true);
      const user = await signup({
        first_name,
        last_name,
        email,
        password,
        phonenumber,
      });
      setLoading(false);
      if (user) {
        router.push("/");
        return;
      }
      setError(true);
    },
    validateOnBlur: true,
  });

  useEffect(() => {
    setMounted(true);
    // if (user && user.user_id) {
    //   router.push("/");
    // }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  if (!mounted) return null;
  const renderFieldsInput = () => {
    return FIELDS_INPUT_SIGNUP.map(field => {
      return (
        <Box width="100%" mb={2} key={field.name}>
          <CustomTextField
            name={field.name}
            variant="outlined"
            label={field.label}
            type={
              field.name === "password" || field.name === "confirmPassword"
                ? showPassword
                  ? "text"
                  : "password"
                : "text"
            }
            size="medium"
            width="100%"
            value={formik.values[field.name as keyof InitialSignupValues]}
            onChange={formik.handleChange}
            onFocus={() => setError(false)}
          ></CustomTextField>
          <Typography
            sx={{
              fontSize: 12,
            }}
            color={theme.palette.error.main}
          >
            {formik.errors[field.name as keyof InitialSignupValues]}
          </Typography>
        </Box>
      );
    });
  };
  return (
    <div>
      <Head>
        <title>E-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Suspense fallback={<Loader />}>
        <DefaultLayout>
          <Typography variant="h5" mt={4} mb={5} textAlign="center">
            Login
          </Typography>
          <Box display="flex" justifyContent="center">
            <Box
              component="form"
              onSubmit={formik.handleSubmit}
              display="flex"
              alignItems="center"
              flexDirection="column"
              width={420}
              maxWidth="100%"
              px={2}
            >
              {renderFieldsInput()}
              <Box width="100%">
                <FormControlLabel
                  label="Show password"
                  control={
                    <Checkbox
                      checked={showPassword}
                      onChange={() => setShowPassword(!showPassword)}
                    />
                  }
                />
                {error && (
                  <Typography
                    variant="subtitle1"
                    sx={{
                      fontSize: 13,
                      color: theme.palette.error.main,
                    }}
                  >
                    This email is registered
                  </Typography>
                )}
              </Box>
              <LoadingButton
                loading={loading}
                variant="contained"
                sx={{ marginTop: 3 }}
                fullWidth
                type="submit"
                disabled={loading}
              >
                Signup
              </LoadingButton>
              <Link href={AuthPathsEnum.LOGIN}>
                <Typography
                  mt={2}
                  sx={{
                    textDecoration: "underline",
                    color: theme.palette.primary.main,
                    cursor: "pointer",
                  }}
                >
                  Login with an exist account
                </Typography>
              </Link>
            </Box>
          </Box>
        </DefaultLayout>
      </Suspense>
    </div>
  );
};

export default Signup;
