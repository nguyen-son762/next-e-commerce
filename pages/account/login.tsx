import { AuthPathsEnum } from "@/auth/auth";
import useStore from "@/auth/store/auth";
import CustomTextField from "@/components/atoms/CustomTextField";
import Loader from "@/components/atoms/Loader";
import theme from "@/themes/theme";
import { LoadingButton } from "@mui/lab";
import { Box, Checkbox, FormControlLabel, Typography } from "@mui/material";
import { useFormik } from "formik";
const DefaultLayout = dynamic(
  () => import("@/components/layout/DefaultLayout"),
  { suspense: true,ssr:false }
);

import { NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { Suspense, useEffect, useState } from "react";
import * as yup from "yup";

const schema = yup.object({
  email: yup
    .string()
    .trim()
    .required("Email is required")
    .email("Invalid email"),
  password: yup
    .string()
    .trim()
    .required("Password is required")
    .min(5, "Password must be at least 5 characters"),
});

const Login: NextPage = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [mounted, setMounted] = useState(false);
  const { login } = useStore();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const router = useRouter();

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema: schema,
    onSubmit: async (values) => {
      setLoading(true);
      const user = await login({
        email: values.email,
        password: values.password,
      });
      setLoading(false);
      if (user) {
        router.push('/', '/', { locale: 'vn' })
        return;
      }
      setError(true);
    },
    validateOnBlur: true,
  });

  useEffect(() => {
    setMounted(true);
  }, []);
  if (!mounted) return null;

  return (
    <div>
      <Head>
        <title>E-commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Suspense fallback={<Loader />}>
        <DefaultLayout>
          <Typography variant="h5" mt={4} mb={5} textAlign="center">
            Login
          </Typography>
          <Box display="flex" justifyContent="center">
            <Box
              component="form"
              onSubmit={formik.handleSubmit}
              display="flex"
              alignItems="center"
              flexDirection="column"
              width={420}
              maxWidth="100%"
              px={2}
            >
              <Box width="100%">
                <CustomTextField
                  name="email"
                  variant="outlined"
                  label="Email"
                  size="medium"
                  width="100%"
                  value={formik.values.email}
                  onChange={formik.handleChange}
                  onFocus={() => setError(false)}
                ></CustomTextField>
                <Typography
                  sx={{
                    fontSize: 12,
                  }}
                  color={theme.palette.error.main}
                >
                  {formik.errors.email}
                </Typography>
              </Box>
              <Box mt={3} width="100%">
                <CustomTextField
                  name="password"
                  variant="outlined"
                  label="Password"
                  size="medium"
                  type={!showPassword ? "password" : "text"}
                  width="100%"
                  value={formik.values.password}
                  onChange={formik.handleChange}
                  onFocus={() => setError(false)}
                ></CustomTextField>
                <Typography
                  sx={{
                    fontSize: 12,
                  }}
                  color={theme.palette.error.main}
                >
                  {formik.errors.password}
                </Typography>
              </Box>
              <Box width="100%">
                <FormControlLabel
                  label="Show password"
                  control={
                    <Checkbox
                      checked={showPassword}
                      onChange={() => setShowPassword(!showPassword)}
                    />
                  }
                />
                {error && (
                  <Typography
                    variant="subtitle1"
                    sx={{
                      fontSize: 13,
                      color: theme.palette.error.main,
                    }}
                  >
                    Wrong account or password
                  </Typography>
                )}
              </Box>
              <LoadingButton
                loading={loading}
                variant="contained"
                sx={{ marginTop: 3 }}
                fullWidth
                type="submit"
                disabled={loading}
              >
                Login
              </LoadingButton>
              <Link href={AuthPathsEnum.SIGNUP}>
                <Typography
                  mt={2}
                  sx={{
                    textDecoration: "underline",
                    color: theme.palette.primary.main,
                    cursor: "pointer",
                  }}
                >
                  Create an account
                </Typography>
              </Link>
            </Box>
          </Box>
        </DefaultLayout>
      </Suspense>
    </div>
  );
};

export default Login;
